services:
    #----------api-gateway---------
    api-gateway:
        build:
            context: .
            dockerfile: Dockerfile.api-gateway
        container_name: api-gateway
        ports:
            - "8080:8080"
        networks:
            - project-network
        depends_on:
            - consul
            - event-service

    #----------event-service---------
    event-service:
        build:
            context: .
            dockerfile: Dockerfile.event-service
        container_name: event-service
        ports:
            - "8082:8082"
        environment:
            DATABASE_URL: postgres://admin:pass@register-event-db:5432/event_db
        depends_on:
            - register-event-db
        networks:
            - project-network

    #----------event-db---------
    event-db:
        image: postgres:latest
        container_name: event-db
        environment:
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: pass
            POSTGRES_DB: event_db
            PGDATA: /var/lib/postgresql/data/pgdata
        ports:
            - "5432:5432"
        depends_on:
            - consul
        volumes:
            - ./pgdata-event:/var/lib/postgresql/data/pgdata
            - ./event-service/database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "admin", "-d", "event_db"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: unless-stopped
        networks:
            - project-network

    #----------register-event-db---------
    register-event-db:
        build:
            context: .
            dockerfile: Dockerfile.event_db
        container_name: register-event-db
        depends_on:
            - event-db
        networks:
            - project-network
        restart: "no"

    #----------register-auth-db---------
    register-auth-db:
        build:
            context: .
            dockerfile: Dockerfile.auth_db
        container_name: register-auth-db
        depends_on:
            - postgres-authorization
            - consul
        networks:
            - project-network
        restart: "no"

    #----------redis-authorization---------
    redis-authorization:
        image: redis:latest
        container_name: redis-authorization
        environment:
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_USER=${REDIS_USER}
            - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
        ports:
            - "6380:6379"
        volumes:
            - ./redisdata-auth:/data
        deploy:
            resources:
                limits:
                    cpus: "0.50"
                    memory: 512M
                reservations:
                    cpus: "0.25"
                    memory: 256M
        command: >
            sh -c '
              mkdir -p /usr/local/etc/redis &&
              echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
              echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
              echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
              echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
              echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
              echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
              redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
            '
        healthcheck:
            test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
            interval: 30s
            timeout: 10s
            retries: 5
        restart: unless-stopped
        tty: true
        stdin_open: true
        networks:
            - project-network

    #----------postgres-authorization---------
    postgres-authorization:
        image: postgres:latest
        container_name: postgres-authorization
        environment:
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: pass
            POSTGRES_DB: authorization
            PGDATA: /var/lib/postgresql/data/pgdata
        ports:
            - "5430:5432"
        volumes:
            - ./pgdata-auth:/var/lib/postgresql/data/pgdata
            - ./auth-service/init/init.sql:/docker-entrypoint-initdb.d/init.sql
        deploy:
            resources:
                limits:
                    cpus: "0.50"
                    memory: 512M
                reservations:
                    cpus: "0.25"
                    memory: 256M
        command: >
            postgres -c max_connections=1000
                     -c shared_buffers=256MB
                     -c effective_cache_size=768MB
                     -c maintenance_work_mem=64MB
                     -c checkpoint_completion_target=0.7
                     -c wal_buffers=16MB
                     -c default_statistics_target=100
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U admin -d postgres_db"]
            interval: 30s
            timeout: 10s
            retries: 5
        restart: unless-stopped
        tty: true
        stdin_open: true
        networks:
            - project-network

    #----------auth-gateway---------
    auth-gateway:
        build:
            context: .
            dockerfile: Dockerfile.auth-service
        container_name: auth-gateway
        ports:
            - "8000:8000"
        networks:
            - project-network
        depends_on:
            - consul
            - redis-authorization
            - postgres-authorization

    #----------booking-service---------
    booking-service1:
        build:
            context: .
            dockerfile: Dockerfile.booking-service
        container_name: booking-service1
        ports:
            - "8084:8084"
        depends_on:
            - register-cassandra
        networks:
            - project-network
        command: python3 main.py --port 8084
        restart: unless-stopped

    #----------cassandra---------
    cassandra:
        image: cassandra:4.1
        container_name: cassandra_node
        ports:
            - "9042:9042"
        networks:
            - project-network
        environment:
            - CASSANDRA_CLUSTER_NAME=TestCluster
            - CASSANDRA_DC=datacenter1
            - CASSANDRA_RACK=rack1
        volumes:
            - cassandra_data:/var/lib/cassandra
            - ./booking-service/database/create_tables.cql:/docker-entrypoint-initdb.d/create_tables.cql
    
    #----------register-cassandra---------

    register-cassandra:
        build:
            context: .
            dockerfile: Dockerfile.booking_cassandra
        container_name: register-cassandra
        depends_on:
            - cassandra
            - consul
        networks:
            - project-network
        restart: "no"
   
     #----------redis-ticket-lock---------
    redis-ticket-lock:
        image: redis:latest
        container_name: redis-ticket-lock
        environment:
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_USER=${REDIS_USER}
            - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
        ports:
            - "6381:6379"
        volumes:
            - ./redisdata-booking:/data
        deploy:
            resources:
                limits:
                    cpus: "0.50"
                    memory: 512M
                reservations:
                    cpus: "0.25"
                    memory: 256M
        command: >
            sh -c '
              mkdir -p /usr/local/etc/redis &&
              echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
              echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
              echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
              echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
              echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
              echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
              redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
            '
        healthcheck:
            test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
            interval: 30s
            timeout: 10s
            retries: 5
        restart: unless-stopped
        tty: true
        stdin_open: true
        networks:
            - project-network

    #----------consul---------
    consul:
        image: consul:1.15
        container_name: consul-server
        ports:
            - "8500:8500"
            - "8600:8600/udp"
        command: "agent -dev -client=0.0.0.0"
        networks:
            - project-network

networks:
    project-network:
        driver: bridge

volumes:
    pgdata-event:
        driver: local
    pgdata-auth:
        driver: local
    kafka_data:
    cassandra_data:
