services:
    #----------api-gateway---------
    api-gateway:
        build:
            context: .
            dockerfile: Dockerfile.api-gateway
        container_name: api-gateway
        ports:
            - "8080:8080"
        networks:
            - project-network
        depends_on:
            - consul
            - event-service

    #----------event-service---------
    event-service:
        build:
            context: .
            dockerfile: Dockerfile.event-service
        container_name: event-service
        ports:
            - "8082:8082"
        environment:
            DATABASE_URL: postgres://admin:pass@register-event-db:5432/event_db
        depends_on:
            - event-db
            - consul
        networks:
            - project-network

    #----------event-db---------
    event-db:
        image: postgres:latest
        container_name: event-db
        environment:
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: pass
            POSTGRES_DB: event_db
            PGDATA: /var/lib/postgresql/data/pgdata
        ports:
            - "5432:5432"
        # depends_on:
        #     - consul
        volumes:
            - ./pgdata-event:/var/lib/postgresql/data/pgdata
            - ./event-service/database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "admin", "-d", "event_db"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: unless-stopped
        networks:
            - project-network

    #----------redis-authorization---------
    redis-authorization:
        image: redis:latest
        container_name: redis-authorization
        environment:
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_USER=${REDIS_USER}
            - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
        ports:
            - "6380:6379"
        volumes:
            - ./redisdata-auth:/data
        deploy:
            resources:
                limits:
                    cpus: "0.50"
                    memory: 512M
                reservations:
                    cpus: "0.25"
                    memory: 256M
        command: >
            sh -c '
              mkdir -p /usr/local/etc/redis &&
              echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
              echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
              echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
              echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
              echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
              echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
              redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
            '
        healthcheck:
            test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
            interval: 30s
            timeout: 10s
            retries: 5
        restart: unless-stopped
        tty: true
        stdin_open: true
        networks:
            - project-network

    #----------postgres-authorization---------
    postgres-authorization:
        image: postgres:latest
        container_name: postgres-authorization
        environment:
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: pass
            POSTGRES_DB: authorization
            PGDATA: /var/lib/postgresql/data/pgdata
        ports:
            - "5430:5432"
        volumes:
            - ./pgdata-auth:/var/lib/postgresql/data/pgdata
            - ./auth-service/init/init.sql:/docker-entrypoint-initdb.d/init.sql
        deploy:
            resources:
                limits:
                    cpus: "0.50"
                    memory: 512M
                reservations:
                    cpus: "0.25"
                    memory: 256M
        command: >
            postgres -c max_connections=1000
                     -c shared_buffers=256MB
                     -c effective_cache_size=768MB
                     -c maintenance_work_mem=64MB
                     -c checkpoint_completion_target=0.7
                     -c wal_buffers=16MB
                     -c default_statistics_target=100
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U admin -d authorization"]
            interval: 30s
            timeout: 10s
            retries: 5
        restart: unless-stopped
        tty: true
        stdin_open: true
        networks:
            - project-network

    #----------auth-gateway---------
    auth-gateway:
        build:
            context: .
            dockerfile: Dockerfile.auth-service
        container_name: auth-gateway
        ports:
            - "8000:8000"
        networks:
            - project-network
        depends_on:
            - consul
            - redis-authorization
            - postgres-authorization

    #----------booking-service---------
    booking-service1:
        build:
            context: .
            dockerfile: Dockerfile.booking-service
        container_name: booking-service1
        ports:
            - "8084:8084"
        depends_on:
            - cassandra-init
        networks:
            - project-network
        command: python3 main.py --port 8084
        restart: unless-stopped

    booking-service2:
        build:
            context: .
            dockerfile: Dockerfile.booking-service
        container_name: booking-service2
        ports:
            - "8085:8085"
        depends_on:
            - cassandra-init
        networks:
            - project-network
        command: python3 main.py --port 8085
        restart: unless-stopped

    booking-service3:
        build:
            context: .
            dockerfile: Dockerfile.booking-service
        container_name: booking-service3
        ports:
            - "8086:8086"
        depends_on:
            - cassandra-init
        networks:
            - project-network
        command: python3 main.py --port 8086
        restart: unless-stopped

    #----------cassandra---------
    cassandra:
        image: cassandra:4.1
        container_name: cassandra_node
        ports:
            - "9042:9042"
        networks:
            - project-network
        environment:
            - CASSANDRA_CLUSTER_NAME=TestCluster
            - CASSANDRA_DC=datacenter1
            - CASSANDRA_RACK=rack1
        volumes:
            - ./cassandra_data:/var/lib/cassandra
        healthcheck:
            test: ["CMD", "cqlsh", "-e", "DESCRIBE KEYSPACES"]
            interval: 10s
            timeout: 5s
            retries: 10
            start_period: 30s

    #----------cassandra-init---------
    cassandra-init:
        image: cassandra:4.1
        container_name: cassandra-init
        depends_on:
            cassandra:
                condition: service_healthy
        entrypoint: ["/bin/bash", "-c"]
        command: >
            "
            echo 'Waiting for Cassandra to be ready...';
            until cqlsh cassandra 9042 -e 'SELECT now() FROM system.local'; do sleep 5; done;
            echo 'Running init CQL...';
            cqlsh cassandra 9042 -f /scripts/create_tables.cql;
            echo 'Init done!';
            "
        volumes:
            - ./booking-service/database/create_tables.cql:/scripts/create_tables.cql
        networks:
            - project-network

    #----------redis-ticket-lock---------
    redis-ticket-lock:
        image: redis:latest
        container_name: redis-ticket-lock
        environment:
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_USER=${REDIS_USER}
            - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
        ports:
            - "6381:6379"
        volumes:
            - ./redisdata-booking:/data
        deploy:
            resources:
                limits:
                    cpus: "0.50"
                    memory: 512M
                reservations:
                    cpus: "0.25"
                    memory: 256M
        command: >
            sh -c '
              mkdir -p /usr/local/etc/redis &&
              echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
              echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
              echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
              echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
              echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
              echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
              redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
            '
        healthcheck:
            test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
            interval: 30s
            timeout: 10s
            retries: 5
        restart: unless-stopped
        tty: true
        stdin_open: true
        networks:
            - project-network

    # todo create 2 payment services
    #----------consul---------
    consul:
        image: consul:1.15
        container_name: consul-server
        ports:
            - "8500:8500"
            - "8600:8600/udp"
        command: "agent -dev -client=0.0.0.0"
        networks:
            - project-network

  ### Payment microservices
    zookeeper-payment:
      image: confluentinc/cp-zookeeper:7.8.0
      hostname: zookeeper-payment
      container_name: zookeeper-payment
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_SERVER_ID: 1
        ZOOKEEPER_SERVERS: zookeeper-payment:2888:3888
      networks:
        - project-network

    kafka-payment:
      image: confluentinc/cp-kafka:7.8.0
      hostname: kafka-payment
      container_name: kafka-payment
      ports:
        - "9092:9092"
        - "29092:29092"
        - "9999:9999"
      environment:
        KAFKA_LISTENERS: INTERNAL://0.0.0.0:19092,EXTERNAL://0.0.0.0:9092,DOCKER://0.0.0.0:29092
        KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-payment:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
        KAFKA_ZOOKEEPER_CONNECT: "zookeeper-payment:2181"
        KAFKA_BROKER_ID: 1
        KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_JMX_PORT: 9999
        KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
        KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
        KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"

      depends_on:
        - zookeeper-payment
      networks:
        - project-network

    payment-microservice:
      build:
        context: .
        dockerfile: Dockerfile.payment-service
      container_name: payment-microservice
      ports:
        - "5050:5050"
      networks:
        - project-network
      depends_on:
        - consul
        - zookeeper-payment
        - kafka-payment


networks:
    project-network:
        driver: bridge

volumes:
    pgdata-event:
        driver: local
    pgdata-auth:
        driver: local
    kafka_data:
    cassandra_data:
