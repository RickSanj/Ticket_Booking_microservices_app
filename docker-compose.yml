services:
    api-gateway:
        build:
            context: .
            dockerfile: Dockerfile.api-gateway
        container_name: api-gateway
        ports:
            - "8080:8080"
        networks:
            - project-network
        depends_on:
            - consul
            - event-service
        #   - kafka

    event-service:
        build:
            context: .
            dockerfile: Dockerfile.event-service
        container_name: event-service
        ports:
            - "8082:8082"
        environment:
            DATABASE_URL: postgres://admin:pass@event-db:5432/event_db
        depends_on:
            - register-event-db
        networks:
            - project-network

    consul:
        image: consul:1.15
        container_name: consul-server
        ports:
            - "8500:8500"
            - "8600:8600/udp" # DNS
        command: "agent -dev -client=0.0.0.0"
        networks:
            - project-network

<<<<<<< HEAD
    redis:
      image: redis:latest
      container_name: redis_autorization
      environment:
        - REDIS_PASSWORD=${REDIS_PASSWORD}
        - REDIS_USER=${REDIS_USER}
        - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
      ports:
        - "6380:6379"
      volumes:
        - ./redisdata:/data
      deploy:
        resources:
          limits:
            cpus: '0.50'
            memory: 512M
          reservations:
            cpus: '0.25'
            memory: 256M
      command: >
        sh -c '
          mkdir -p /usr/local/etc/redis &&
          echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
          echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
          echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
          echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
          echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
          echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
          redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
        '
      healthcheck:
        test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
        interval: 30s
        timeout: 10s
        retries: 5
      restart: unless-stopped
      tty: true
      stdin_open: true

    postgres-auth:
      image: postgres:latest
      container_name: postgres_authorization
      environment:
        POSTGRES_USER: admin
        POSTGRES_PASSWORD: pass
        POSTGRES_DB: postgres_db
        PGDATA: /var/lib/postgresql/data/pgdata
      ports:
        - "5430:5432"
      volumes:
        - ./pgdata:/var/lib/postgresql/data/pgdata
      deploy:
        resources:
          limits:
            cpus: '0.50'
            memory: 512M
          reservations:
            cpus: '0.25'
            memory: 256M
      command: >
        postgres -c max_connections=1000
                -c shared_buffers=256MB
                -c effective_cache_size=768MB
                -c maintenance_work_mem=64MB
                -c checkpoint_completion_target=0.7
                -c wal_buffers=16MB
                -c default_statistics_target=100
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U admin -d postgres_db" ]
        interval: 30s
        timeout: 10s
        retries: 5
      restart: unless-stopped
      tty: true
      stdin_open: true
      networks:
        - project-network

=======
    event-db:
        image: postgres:latest
        container_name: event-db
        environment:
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: pass
            POSTGRES_DB: event_db
            PGDATA: /var/lib/postgresql/data/pgdata
        ports:
            - "5432:5432"
        depends_on:
            - consul
        volumes:
            - ./pgdata:/var/lib/postgresql/data/pgdata
            - ./event-service/database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "admin", "-d", "event_db"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: unless-stopped
        networks:
            - project-network


    register-event-db:
        build:
            context: .
            dockerfile: Dockerfile.event_db  # Define this Dockerfile for the registration service
        container_name: register-event-db
        depends_on:
            - event-db
        networks:
            - project-network

>>>>>>> 605129241376013dabb9a7b3cc36bb1f99f90ad7

networks:
    project-network:
        driver: bridge

volumes:
    kafka_data:
    pgdata:
      driver: local
