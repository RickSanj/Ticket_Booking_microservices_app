services:
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    networks:
      - project-network
    depends_on:
      - consul
      - event-service
      - auth-microservice

  event-service:
    build:
      context: .
      dockerfile: Dockerfile.event-service
    container_name: event-service
    ports:
      - "8082:8082"
    environment:
      DATABASE_URL: postgres://admin:pass@register-event-db:5432/event_db
    depends_on:
      - register-event-db
    networks:
      - project-network

  consul:
    image: consul:1.15
    container_name: consul-server
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: "agent -dev -client=0.0.0.0"
    networks:
      - project-network

  event-db:
    image: postgres:latest
    container_name: event-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: event_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    depends_on:
      - consul
    volumes:
      - ./pgdata-event:/var/lib/postgresql/data/pgdata
      - ./event-service/database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin", "-d", "event_db"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - project-network

  register-event-db:
    build:
      context: .
      dockerfile: Dockerfile.event_db
    container_name: register-event-db
    depends_on:
      - event-db
    networks:
      - project-network

  redis-authorization:
    image: redis:latest
    container_name: redis-authorization
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    ports:
      - "6380:6379"
    volumes:
      - ./redisdata:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - project-network

  postgres-authorization:
    image: postgres:latest
    container_name: postgres-authorization
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: postgres_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5430:5432"
    volumes:
      - ./pgdata-auth:/var/lib/postgresql/data/pgdata
      - ./auth-service/init/init.sql:/docker-entrypoint-initdb.d/init.sql
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d postgres_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - project-network

  auth-microservice:
    build:
      context: .
      dockerfile: Dockerfile.auth-service
    container_name: auth-microservice
    ports:
      - "8000:8000"
    networks:
      - project-network
    depends_on:
      - consul
      - redis-authorization
      - postgres-authorization

### Payment microservices
  zookeeper-payment:
    image: confluentinc/cp-zookeeper:7.8.0
    hostname: zookeeper-payment
    container_name: zookeeper-payment
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper-payment:2888:3888
    networks:
      - project-network

  kafka-payment:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka-payment
    container_name: kafka-payment
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:19092,EXTERNAL://0.0.0.0:9092,DOCKER://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-payment:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-payment:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"

    depends_on:
      - zookeeper-payment
    networks:
      - project-network

  payment-microservice:
    build:
      context: .
      dockerfile: Dockerfile.payment-service
    container_name: payment-microservice
    ports:
      - "5050:5050"
    networks:
      - project-network
    depends_on:
      - consul
      - zookeeper-payment
      - kafka-payment


networks:
  project-network:
    driver: bridge

volumes:
  pgdata-event:
    driver: local
  pgdata-auth:
    driver: local
  kafka_data:
